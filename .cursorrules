You are an expert in TypeScript, Node.js, Next.js App Router, React, Mantine, Tailwind CSS and DrizzleORM.

# Code Style & Structure

## Code Style

- Write concise TypeScript code; avoid classes, prefer functional patterns
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Pass multiple parameters as named objects
- Use pnpm for package management
- Mark client components with 'use client'
- Mark server actions with 'use server'
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces
- Use 'nuqs' for URL search parameter state management.
- Use only for Web API access in small components.
- Avoid for data fetching or state management.
- Follow Next.js docs for Data Fetching, Rendering, and Routing.

## Base Directory Structure

- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports
- Avoid creating new components or hooks directly in page files whenever possible.
- Colocate types and zod schemas with their respective action, query, or component files when possible.
- Move to global directories (src/actions, src/components, src/hooks) only if:
  - Used across multiple routes
  - Part of core infrastructure
  - Shared between unrelated features
- Colocate route-specific code and only move code to global directories (src/actions, src/components, src/hooks) if:
  - It's used across multiple routes
  - It's part of the core application infrastructure
  - It needs to be shared between unrelated features
- All of the app name or config is on the config.ts file
- All of the AI service is on the src/ai.ts file
- All of the database schema is on the db/schema.ts file

- Route Structure:

```
/app
  /[feature]                # Route name or group name
    - page.tsx              # Server Component
    - loading.tsx           # Loading state
    - [feature].action.ts   # Server actions
    - [feature].query.ts    # Route-specific database queries
    - components/           # Feature-specific components
      - [feature]-form.tsx
    - hooks/               # Feature-specific hooks (if the hooks is not available on Mantine)
      - use-[feature].ts
  - config.ts               # App config
  - theme.ts                # Mantine theme
  - safe-action.ts          # Next-safe-action config
  - ai.ts                   # AI service and models
  - db/
    - schema.ts             # DrizzleORM schema

```

# Server Components and Actions

## Best Practices

- Always prefer server actions over API routes
- Server actions is handled by next-safe-action library. Follow the documentation and examples of the library.
- Use server actions for:
  - Form submissions
  - Data mutations
  - API integrations
  - Authentication flows
  - File uploads
- Only use API routes when:
  - You need a public API endpoint
  - Third-party services require webhooks
  - You need to handle non-POST methods
- Action Best Practices:
  - Always include "use server" at the top of action files
  - Use Zod schemas for input validation
  - Keep validation schemas in the same file as the action
  - Return consistent response shapes (success/failure)
  - Handle errors gracefully with meaningful messages
  - Keep actions focused and single-purpose
  - Only move to global actions if used across multiple routes
  - Consider adding middleware in safe-action.ts for common requirements
- Action Structure:

```typescript
// feature.action.ts
"use server";

import { z } from "zod";
import { actionClient } from "@/safe-action";

const schema = z.object({
  username: z.string().min(3).max(10),
  password: z.string().min(8).max(100),
});

export const featureAction = actionClient
  .schema(schema)
  .action(async ({ parsedInput }) => {
    return {
      responseData, // data directly from the action
      // or
      error: "Operation failed",
    };
  });
```

- Action Hook Features:

  - `useAction`:
    - Waits for server response
    - Provides execution status
    - Type-safe error handling
    - Access to validation errors
  - `useOptimisticAction`:
    - Immediate UI updates
    - Syncs with server response
    - Maintains optimistic state
    - Handles rollbacks automatically

- Hook Status Properties (from result.status):

  - `isIdle`: Initial state
  - `isExecuting`: Action in progress
  - `isTransitioning`: Route transition
  - `isPending`: Combined executing/transitioning
  - `hasSucceeded`: Action completed
  - `hasErrored`: Action failed

- Best Practices:

  - Always handle loading and error states
  - Prefer `isPending` over `isExecuting` for status checks
  - Reset state when needed using `reset()`
  - Provide meaningful error messages

- Use `useAction` for standard operations:

  ```typescript
  "use client";

  export function FeatureComponent() {
    const { execute, result, status } = useAction(featureAction);

    return (
      <button
        disabled={status.isPending}
        onClick={() => execute({ name: "value" })}
      >
        {status.isPending ? "Loading..." : "Submit"}
      </button>
    );
  }
  ```

- Use `useOptimisticAction` for immediate updates:

  ```typescript
  "use client";

  export function TodoList({ todos }) {
    const { execute, optimisticState } = useOptimisticAction(addTodo, {
      currentState: { todos },
      updateFn: (state, newTodo) => ({
        todos: [...state.todos, newTodo],
      }),
    });

    return (
      <button onClick={() => execute({ title: "New Todo" })}>Add Todo</button>
    );
  }
  ```

# UI and Styling

- Use Mantine Container instead of Tailwind Container.
- Configure Mantine theme in theme.ts for design system changes
- Modify theme.ts for global style overrides and customizations
- For Mantine components, prefer Mantine default props:
  - m/p for margins/padding (mx="auto")
  - c for colors (c="blue.6")
  - bg for backgrounds (bg="gray.1")
  - w/h for dimensions (w={200})
  - fz for font sizes (fz="sm")
  - fw for font weights (fw={500})
  - ta for text alignment (ta="center")
- If using Mantine props is not possible, use Tailwind for custom components and complex layouts
- If possible, use Mantine <Stack>, <Flex> and <Container> components instead of Tailwind divs.
- Do not use <Group> component, use <Flex> instead.
- For Grid, use Tailwind CSS grid classes. Do not use Mantine Grid.
- Use Mantine Notification component for notification and toast messages.

# Database and DrizzleORM Usage

- Organize database queries in dedicated query files:

  - Global queries go in src/db/queries/
  - Route-specific queries follow colocated structure:
    ```
    /app/feature
      - page.tsx
      - feature.action.ts
      - components/
    ```

- Structure query files:

  - Export individual query functions
  - Group related queries together
  - Use descriptive names that reflect the query purpose
  - Include return type annotations
    Example query file:

    ```typescript
    // feature.query.ts
    import { db } from "@/db";
    import { eq } from "drizzle-orm";
    import { users, posts } from "@/db/schema";

    export async function getUserPosts({ userId }: { userId: string }) {
      return db.query.posts.findMany({
        where: eq(posts.userId, userId),
        with: {
          author: true,
        },
      });
    }
    ```

- DrizzleORM best practices:

  - Use prepared statements for parameterized queries
  - Leverage relations in schema definitions
  - Use transactions for multi-step operations
  - Implement proper error handling
  - Keep queries focused and single-purpose
  - Use appropriate indexes for performance

- Query organization:

  - Colocate queries with their respective features
  - Only move to global queries if used across multiple routes
  - Keep complex joins and aggregations in dedicated query files
  - Use meaningful prefixes for query function names (get-, find-, update-, etc.)
